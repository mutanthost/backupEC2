#!/usr/bin/env python
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import sys
import re
from datetime import datetime
import dateutil.parser
from subprocess import call
from ansible import inventory
from ansible import constants

class AnsibleEc2Cli(object):
    def __init__(self):
        ''' Main execution path '''

        # Handle CLI
        self.args = self.parse_cli_args()

        # CLI post-processing
        self.verbose = 0
        if 'verbose' in self.args and self.args.verbose != None:
            self.verbose = self.args.verbose
        self.group_filters = self.get_group_filters()

        # Run desired command
        self.args.func()


    def parse_cli_args(self):
        ''' Command line argument processing '''

        # Top level parser
        self.parser = argparse.ArgumentParser(description='AWS EC2 helpers, utilities and tricks built on top of Ansible')

        # Options common to all commands
        self._common_parser = argparse.ArgumentParser(add_help=False)
        self._common_parser.add_argument('-i', '--inventory-file', metavar='INVENTORY',
                action='store', default=constants.DEFAULT_HOST_LIST,
                help='The inventory file to use (default=/etc/ansible/hosts)')
        self._common_parser.add_argument('-ic', action='store_true', default=False,
                help='Ignore case - perform case insensitive matches on the filters')
        self._common_parser.add_argument('-v', '--verbose', action='count',
                help='Verbose output useful for debugging, can be use multiple times for more verbose output')

        # Filtering
        filters = self._common_parser.add_argument_group('Filters', 'Reduce the number of instances by filtering on various fields. Filters can be used in combination with each other, and only instances that appear in all filtered sets are returned. If no filters are used, all instances are returned in all regions.')
        filters.add_argument('--name', action='store', help='The "Name" tag of the instance/s to filter on. E.g. --name=Server1')
        filters.add_argument('--sg', metavar='SECURITY_GROUP', action='store', help='Return only instances in a specific security group. E.g. --sg=default')
        filters.add_argument('--key', metavar='KEY_PAIR', action='store', help='The name of the key pair to filter on. E.g. --key=superadmin')
        filters.add_argument('--type', metavar='INSTANCE_TYPE', action='store', help='Return only host using the specific instance type. E.g. --type=m1.xlarge')
        filters.add_argument('--region', action='store', help='Limit to only one region. E.g. --region=us-east-1')
        filters.add_argument('--zone', metavar='AVAILABILITY_ZONE', action='store', help='Limit to only one availability zone. E.g. --zone=us-east-1a')
        filters.add_argument('raw_group', metavar='GROUP_NAME', nargs='?', help='The raw group name to filter on based on the groups produced by the Inventory. This can also be the Instance ID. E.g. i-abcd1234')

        self.subparsers = self.parser.add_subparsers(title='Commands')
        self.command_parsers = {}

        # Create the parser for the "help" command
        help_parser = self.add_command('help', 'Get help about a command', add_common=False)
        help_parser.add_argument('help_command', metavar='command', nargs='*', help='The command to get help on')

        # Create the parser for the "list" command
        list_parser = self.add_command('list', 'Get a list of instances')
        list_parser.add_argument('-l', '--long', action='store_true', default=False,
                help='List in long (detailed) format - but not as detailed as "ansible-ec2 info"')
        list_parser.add_argument('--show-work', action='store_true', default=False,
                help='Show the working out of each group before combining filters')

        # Create the parser for the "info" command
        info_parser = self.add_command('info', 'Get detailed information about instances')

        # Create the parser for the "ssh" command
        ssh_parser = self.add_command('ssh', 'Open an interactive SSH connection to a specific instance')
        ssh_parser.add_argument('--private-key', metavar='PRIVATE_KEY_FILE', action='store', help='Use this file to authenticate the connection')
        ssh_parser.add_argument('-u', '--user', metavar='REMOTE_USER', action='store', help='Connect as this user')
        ssh_parser.add_argument('-n', metavar='NUMBER', type=int, action='store', help='Instance number to connect to when filters match multiple hosts')

        # Final step - go parse those args
        return self.parser.parse_args()


    def add_command(self, command, help, add_common=True):
        ''' Adds a command to the list of available commands, and returns a
        parser that can be used to add arguments specific to that command '''

        if add_common:
            self.command_parsers[command] = self.subparsers.add_parser(command,
                    help=help, parents=[self._common_parser])
        else:
            self.command_parsers[command] = self.subparsers.add_parser(command, help=help)

        self.command_parsers[command].set_defaults(func=getattr(self, command))

        return self.command_parsers[command]


    def get_group_filters(self):
        ''' Apply all filters to the groups - basic set intersection '''

        group_filters = []

        # Name filter
        if 'name' in self.args and self.args.name != None:
            pattern = self.to_safe('tag_Name_%s' % self.args.name)
            if self.verbose >= 1:
                print 'Filter: Name: matching %s' % pattern
            group_filters.append(pattern)

        # Security group filter
        if 'sg' in self.args and self.args.sg != None:
            pattern = self.to_safe('security_group_%s' % self.args.sg)
            if self.verbose >= 1:
                print 'Filter: Security Group: matching %s' % pattern
            group_filters.append(pattern)

        # Key pair filter
        if 'key' in self.args and self.args.key != None:
            pattern = self.to_safe('key_%s' % self.args.key)
            if self.verbose >= 1:
                print 'Filter: Key pair: matching %s' % pattern
            group_filters.append(pattern)

        # Instance type filter
        if 'type' in self.args and self.args.type != None:
            pattern = self.to_safe('type_%s' % self.args.type)
            if self.verbose >= 1:
                print 'Filter: Instance type: matching %s' % pattern
            group_filters.append(pattern)

        # Availability zone filter
        if 'zone' in self.args and self.args.zone != None:
            pattern = self.to_safe(self.args.zone)
            if self.verbose >= 1:
                print 'Filter: Availability Zone: matching %s' % pattern
            group_filters.append(pattern)

        # Region filter
        if 'region' in self.args and self.args.region != None:
            pattern = self.to_safe(self.args.region)
            if self.verbose >= 1:
                print 'Filter: Region: matching %s' % pattern
            group_filters.append(pattern)

        # Raw group filter
        if 'raw_group' in self.args and self.args.raw_group != None:
            pattern = self.to_safe(self.args.raw_group)
            if self.verbose >= 1:
                print 'Filter: Raw Group: matching %s' % pattern
            group_filters.append(pattern)

        if len(group_filters) == 0:
            # No filtering - return everything
            if self.verbose >= 1:
                print 'Filter: none'

        return group_filters


    def get_groups(self):
        ''' Gets a list of all groups '''

        if self.verbose > 0:
            print 'Reading inventory...'
        self.inventory_manager = inventory.Inventory(self.args.inventory_file)
        groups = self.inventory_manager.get_groups()
        if len(groups) == 0:
            print >>sys.stderr, 'ERROR: No instance groups found - check inventory'
            sys.exit(1)

        if self.verbose > 0:
            print 'Inventory has %d groups' % len(groups)

        return groups


    def build_filter_sets(self):
        ''' Builds a set of sets, where each set is one group determined by a
        filter '''

        self.groups = self.get_groups()
        sets = {}
        for filter in self.group_filters:
            hosts = []
            for group in self.groups:
                if group.name == filter or (self.args.ic and group.name.lower() == filter.lower()):
                    hosts = [host.name for host in group.get_hosts()]
                    break
            sets[filter] = hosts
            if self.verbose > 0:
                print 'Group %s has %d hosts' % (filter, len(hosts))

        return sets


    def get_filtered_hosts(self):
        ''' Apply the filters to the set of hosts '''

        filter_sets = self.build_filter_sets()
        if len(filter_sets) == 0:
            # No filters, so return entire list
            host_set = set()
            for group in self.groups:
                for host in group.get_hosts():
                    host_set.add(host.name)

            hosts = list(host_set)

        else:
            # Apply filters
            sets = []
            for group,hosts in filter_sets.iteritems():
                hosts.sort()
                sets.append(set(hosts))
                if 'show_work' in self.args and self.args.show_work:
                    print '[%s]' % group
                    for host in hosts:
                        print host
                    print ''

            intersection = set.intersection(*sets)
            hosts = list(intersection)

        hosts.sort()
        return hosts


    def help(self):
        ''' Command specific help '''

        if 'help_command' in self.args:
            if len(self.args.help_command) == 0:
                self.parser.print_help()
            else:
                cmd = self.args.help_command[0]
                if cmd in self.command_parsers:
                    self.command_parsers[cmd].print_help()
                else:
                    print >>sys.stderr, 'ERROR: Unknown command: %s' % self.args.help_command[0]
                    sys.exit(1)


    def list(self):
        ''' Gets a list of instances '''

        hosts = self.get_filtered_hosts()
        num_hosts = len(hosts)
        x = 'host' if num_hosts == 1 else 'hosts'
        print '(%d %s)' % (num_hosts, x)
        i = 1
        for host in hosts:
            if self.args.long:
                info = self.inventory_manager.get_variables(host)
                if not 'ec2_id' in info:
                    print 'Warning: Could not get EC2 information for: %s' % host
                    continue

                tag_name = ' (' + info['ec2_tag_Name'] + ')' if 'ec2_tag_Name' in info else ''
                print '%4d: %10s %s%s' % (i, info['ec2_id'], host, tag_name)
                i += 1
            else:
                print host


    def ssh(self):
        ''' SSH into a host '''

        hosts = self.get_filtered_hosts()
        if len(hosts) == 0:
            print >>sys.stderr, 'ERROR: Filters match zero instances'
            sys.exit(1)
        elif len(hosts) > 1 and self.args.n == None:
            print >>sys.stderr, 'ERROR: Filters match too many instances (ssh requires only 1 instance). Try adding: -n 1'
            for host in hosts:
                print '  - ' + host
            sys.exit(1)
        n = 0 if self.args.n == None else self.args.n - 1
        if n >= len(hosts):
            print >>sys.stderr, 'ERROR: Bad number index - must be less than %d' % len(hosts)
            sys.exit(1)
        host = hosts[n]

        # Build SSH command
        user = ''
        key = ''
        if self.args.user:
            user = self.args.user + '@'
        if self.args.private_key:
            key = '-i %s ' % self.args.private_key
        cmd = 'ssh %s%s%s' % (key, user, host)
        if self.verbose >= 1: print cmd

        # Execute SSH command
        try:
            retcode = call(cmd, shell=True)
            if retcode == 0:
                pass
            elif retcode < 0:
                print 'SSH was terminated by signal', -retcode
            else:
                print 'SSH returned', retcode
        except OSError as e:
            print 'Execution failed:', e


    def info(self):
        ''' Get detailed information about instances '''

        i = 1
        now = datetime.utcnow()
        for host in self.get_filtered_hosts():
            info = self.inventory_manager.get_variables(host)
            if not 'ec2_id' in info:
                print 'Warning: Could not get EC2 information for: %s' % host
                continue

            tag_name = info['ec2_tag_Name'] if 'ec2_tag_Name' in info else ''
            host_tags = [(key.replace('ec2_tag_', ''), info[key]) for key in info if 'ec2_tag' in key]

            # Do date/time calculations
            launch = dateutil.parser.parse(info['ec2_launch_time']).replace(tzinfo=None)
            uptime = now - launch

            # We have all the data, go print
            print '%d: %s' % (i, tag_name)
            print '  Instance: %-15s      AMI: %-15s  Kernel: %s' % (info['ec2_id'], info['ec2_image_id'], info['ec2_kernel'])
            print '      Type: %-15s     Arch: %-15s   State: %s' % (info['ec2_instance_type'], info['ec2_architecture'], self.get_field(info, 'ec2_state'))
            print ' Virt Type: %s' % info['ec2_virtualization_type']
            print '      Zone: %-15s Key Pair: %s' % (self.get_field(info, 'ec2_placement'), self.get_field(info, 'ec2_key_name'))
            print '  Launch Time: %s' % info['ec2_launch_time']
            print '      Up Time: %d days, %d hours' % (uptime.days, (uptime.seconds/3600))
            print '   Public DNS: %s' % info['ec2_public_dns_name']
            print '    Public IP: %s' % info['ec2_ip_address']
            print '  Private DNS: %s' % info['ec2_private_dns_name']
            print '   Private IP: %s' % info['ec2_private_ip_address']
            if info['ec2_vpc_id']:
                print '  VPC: %s    Subnet: %s' % (info['ec2_vpc_id'], info['ec2_subnet_id'])
            print '  Security Groups: %s' % info['ec2_security_group_names']
            print '    Instance Tags: %s' % ', '.join(['(%s %s)' % (key, value) for key, value in host_tags])
            print ''
            i = i+1


    def get_field(self, data, key):
        ''' Safely gets a field from an array, where the default is an empty string '''

        return data[key] if key in data else ''


    def to_safe(self, word):
        ''' Converts 'bad' characters in a string to underscores so they can be
        used as Ansible groups (this needs to always be the same as the
        EC2 inventory plugin)'''

        return re.sub("[^A-Za-z0-9\-]", "_", word)


########################################################

if __name__ == '__main__':
    cli = AnsibleEc2Cli()

