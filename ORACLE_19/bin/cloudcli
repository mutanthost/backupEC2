#!/bin/sh
#
#
#    NAME
#     cloudcli - Cloud Control Utility
#
#    DESCRIPTION
#      Cloud Control Utility can be used to migrate databases from on premises
#      to the cloud and vice versa.
#
#    MODIFIED   (MM/DD/YY)
#       glabrada 08/02/18 - Fix bug 28345017 Modify how we are shipping cloudcli
#       sowong   12/04/17 - New Creation
#
# External Variable set by the Installer
OHOME=%ORACLE_HOME%
DIRNAME=/usr/bin/dirname
ECHO="/bin/echo"

cmdpath=`$DIRNAME $0`
case "$cmdpath" in
    /*) ;;
    .) cmdpath=`pwd`;;
    *) cmdpath=`pwd`/$cmdpath;;
esac
  
OHOMEDIR=`$DIRNAME $cmdpath`

if [ ! -d $OHOMEDIR/bin ] || [ ! -f $OHOMEDIR/jlib/srvm.jar ]
then
    OHOMEDIR=%ORACLE_HOME%
fi

JREDIR=$OHOMEDIR/jdk
JLIBDIR=$OHOMEDIR/jlib

# jar files

# SRVM-ASM jar file
SRVMASMJAR=$JLIBDIR/srvmasm.jar

### ORATST_SRVCTL11 is a for upgrade tests and WLM folks to add nodeapps in 11.1 style
if [ -z "$ORATST_SRVCTL11" ]
then
#SRVM jar file
   SRVMJAR=$JLIBDIR/srvm.jar

#SRVMRHP jar
   SRVMRHPJAR=$JLIBDIR/srvmrhp.jar

#SRVCTL jar file
   SRVCTLJAR=$OHOMEDIR/srvm/jlib/srvctl.jar

# SRVM-HAS jar file
   SRVMHASJAR=$JLIBDIR/srvmhas.jar
fi

# RHP jar
   GHJAR=$JLIBDIR/rhp.jar

# Grid Naming Service jar file.
GNSJAR=$JLIBDIR/gns.jar

#clsce.jar for snapshot support
CLSCEJAR=$OHOMEDIR/has/jlib/clsce.jar

# Supercluster jar files
SCJAR=$JLIBDIR/supercluster.jar
SCCJAR=$JLIBDIR/supercluster-common.jar
EONSJAR=$OHOMEDIR/ons/lib/ons.jar

#NetCa config jar
NETCFGJAR=$JLIBDIR/netcfg.jar

#LDAP client jar
LDAPJAR=$JLIBDIR/ldapjclnt12.jar

# JRE Executable and Class File Variables
JRE=$JREDIR/bin/java
JREJAR=$JREDIR/jre/lib/rt.jar:$JREDIR/jre/lib/i18n.jar

#GHCTL jar
GHCTLJAR=$JLIBDIR/ghctl.jar

JWCCRED_JAR=$JLIBDIR/jwc-cred.jar

#JACKSON jars
JCOREJAR=$JLIBDIR/jackson-core-2.9.5.jar
JANNOTATIONJAR=$JLIBDIR/jackson-annotations-2.9.5.jar
JDATABINDJAR=$JLIBDIR/jackson-databind-2.9.5.jar

#ORACLE PKI JARS
ORAPKIJARS=$JLIBDIR/oraclepki.jar:$JLIBDIR/cryptoj.jar:$JLIBDIR/osdt_core.jar:$JLIBDIR/osdt_cert.jar

CLASSPATH=$GHJAR:$NETCFGJAR:$JREJAR:$GHCTLJAR:$SRVMJAR:$SRVMHASJAR:$SRVMASMJAR:$SCJAR:$SCCJAR:$EONSJAR:$SRVCTLJAR:$LDAPJAR:$GNSJAR:$CLSCEJAR:$JWCCRED_JAR:$JCOREJAR:$JANNOTATIONJAR:$JDATABINDJAR:$SRVMRHPJAR:$ORAPKIJARS

# turn on output capture
_CRS_UI_FMT=-v
export _CRS_UI_FMT

#Used for specifying any platform specific Java options
JRE_OPTIONS=""

# Set the shared library path for JNI shared libraries
# A few platforms use an environment variable other than LD_LIBRARY_PATH
PLATFORM=`uname`
case $PLATFORM in 
HP-UX)
   LD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib
   export LD_LIBRARY_PATH
   JRE_OPTIONS="-d64"
   ;;
AIX)
   LIBPATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LIBPATH
   export LIBPATH
   JRE_OPTIONS="-d64"
   ;;
Linux)
   LD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LD_LIBRARY_PATH
   # Linux ( ppc64 || s390x ) => LD_LIBRARY_PATH lib32
   ARCH=`uname -m`;
   if [ "$ARCH" = "ppc64" -o "$ARCH" = "s390x" ]
   then
     LD_LIBRARY_PATH=$OHOMEDIR/lib32:$OHOMEDIR/srvm/lib32:$LD_LIBRARY_PATH
   fi
   export LD_LIBRARY_PATH
   ;;
SunOS) 
    LD_LIBRARY_PATH_64=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LD_LIBRARY_PATH_64
    export LD_LIBRARY_PATH_64
    LD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH
    JRE_OPTIONS="-d64"
    ;;
OSF1) LD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LD_LIBRARY_PATH
      export LD_LIBRARY_PATH
      ;;
Darwin) 
      DYLD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$DYLD_LIBRARY_PATH 
      export DYLD_LIBRARY_PATH 
      ;; 
*)    if [ -d $OHOMEDIR/lib32 ];
      then
        LD_LIBRARY_PATH=$OHOMEDIR/lib32:$OHOMEDIR/srvm/lib32:$LD_LIBRARY_PATH
      else
        LD_LIBRARY_PATH=$OHOMEDIR/lib:$OHOMEDIR/srvm/lib:$LD_LIBRARY_PATH
      fi
      export LD_LIBRARY_PATH
      ;;
esac

#determine mode gi/nogi
ORACLE_HOME_TEMP=$ORACLE_HOME
ORACLE_HOME=$OHOME
export ORACLE_HOME
OBASE=`$OHOME/bin/orabase`
HOST=`/bin/hostname | /bin/cut -d . -f 1 | tr '[:upper:]' '[:lower:]'`
NOGIMODE=false
if [ -f $OBASE/crsdata/$HOST/rhp/nogi.enabled ]
then
  NOGIMODE=true
fi

#Revert to orginal value
ORACLE_HOME=$ORACLE_HOME_TEMP
export ORACLE_HOME

if [ "X$NOGIMODE" != "Xtrue" ]
then
    #Get crshome
    CHOME=`$OHOME/srvm/admin/getcrshome`

    if [ $? = 1 ]
    then
        $ECHO "****Unable to retrieve Oracle Clusterware home."
        $ECHO "Start Oracle Clusterware stack and try again."
        exit 1
    fi

    if [ "X$CHOME" != "X$OHOME" ]
    then  
        if [ "X$ORACLE_HOME" == "X" ]
        then
            $ECHO "****ORACLE_HOME environment variable is not set."
            $ECHO "    ORACLE_HOME should be set to the main"
            $ECHO "    directory that contains Oracle products."
            $ECHO "    Set and export ORACLE_HOME, then re-run."
            exit 1;
        fi
    else
        ORACLE_HOME=$CHOME
    fi
else
    ORACLE_HOME=$OHOME
fi
export ORACLE_HOME

# Properties to pass directly to java
if [ "X$SRVM_PROPERTY_DEFS" = "X" ]
then
  SRVM_PROPERTY_DEFS=""
fi

# Environment variable to turn on tracing
if [ "X$SRVM_TRACE" != "X" ]
then
  if [ "$SRVM_TRACE" != "false" ]  && [ "$SRVM_TRACE" != "FALSE" ]
  then
    SRVM_PROPERTY_DEFS="$SRVM_PROPERTY_DEFS -DTRACING.ENABLED=true -DTRACING.LEVEL=2"
    # Environment variable to turn on tracing to a file.
    if [ "X$GHCTL_TRACEFILE" != "X" ]
    then
        SRVM_PROPERTY_DEFS="$SRVM_PROPERTY_DEFS -Dsrvm.ghctl.tracefile=$GHCTL_TRACEFILE -Doracle.eonsd.tracefile=$GHCTL_TRACEFILE"
    fi
  fi
fi


# Environment variable to turn on checking
if [ "X$CHECK_LEVEL" != "X" ]
then
    SRVM_PROPERTY_DEFS="$SRVM_PROPERTY_DEFS -DNETWORK.CHECKLEVEL=$CHECK_LEVEL"
fi

# Add configuration file containing logging properties.
SRVM_PROPERTY_DEFS="$SRVM_PROPERTY_DEFS -Djava.util.logging.config.file=$CHOME/srvm/admin/logging.properties"

# Run srvctl 
$JRE $JRE_OPTIONS -DORACLE_HOME=$ORACLE_HOME -DZDM_SERVICE=true -classpath $CLASSPATH $SRVM_PROPERTY_DEFS oracle.cluster.gridhome.ghctl.GHCTLDriver "$@"
exit $?

